<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hong&#39;s home</title>
  
  <subtitle>想要的都拥有，得不到的都释怀。</subtitle>
  <link href="https://youthjourney.github.io/atom.xml" rel="self"/>
  
  <link href="https://youthjourney.github.io/"/>
  <updated>2021-10-20T03:03:27.000Z</updated>
  <id>https://youthjourney.github.io/</id>
  
  <author>
    <name>Hong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Opencv-Python图像像素均值、方差，绘制几何形状</title>
    <link href="https://youthjourney.github.io/2021/10/20/Opencv-Python%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0%E5%9D%87%E5%80%BC%E3%80%81%E6%96%B9%E5%B7%AE%EF%BC%8C%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/"/>
    <id>https://youthjourney.github.io/2021/10/20/Opencv-Python%E5%9B%BE%E5%83%8F%E5%83%8F%E7%B4%A0%E5%9D%87%E5%80%BC%E3%80%81%E6%96%B9%E5%B7%AE%EF%BC%8C%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%BD%A2%E7%8A%B6/</id>
    <published>2021-10-20T03:03:27.000Z</published>
    <updated>2021-10-20T03:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像像素均值、方差"><a href="#图像像素均值、方差" class="headerlink" title="图像像素均值、方差"></a>图像像素均值、方差</h2><p>计算数组元素的均值和方差函数<code>cv.meanStdDev()</code>。传入数组数据，返回数组数据的均值和方差。在图像数组中，可以计算出图像数组的像素均值和方差。</p><p>使用<code>np.min</code>和<code>np.max</code>可以计算数组元素的最小值和最大值。在图像数组中，可以计算每个通道像素最小值和最大值。</p><span id="more"></span><p>以下面图像为例，计算该图像的像素均值和方差，以及每个通道的像素最小值和最大值。</p><p><img src="https://img-blog.csdnimg.cn/621dccd2d71846a3989f40cd09a0b730.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASG9uZ19Zb3V0aA==,size_15,color_FFFFFF,t_70,g_se,x_16" alt="实验图片"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: image_shape_painting.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Date: 21:12</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pixel_operation</span>(<span class="params">image_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    img = cv.imread(image_path, cv.IMREAD_COLOR)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;input&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：python中的print函数默认换行，可以用end=&#x27;&#x27;或者接任意字符</span></span><br><span class="line">    <span class="comment"># 像素均值、方差</span></span><br><span class="line">    means, dev = cv.meanStdDev(img)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;means: &#123;&#125;, \n dev: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(means, dev))</span><br><span class="line">    <span class="comment"># 像素最大值和最小值</span></span><br><span class="line">    min_pixel = np.<span class="built_in">min</span>(img[:, :, <span class="number">0</span>])</span><br><span class="line">    max_pixel = np.<span class="built_in">max</span>(img[:, :, -<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;min: &#123;&#125;, max: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(min_pixel, max_pixel))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若是一个空白图像</span></span><br><span class="line">    blank = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    <span class="comment"># 像素均值、方差</span></span><br><span class="line">    <span class="comment"># blank[:, :] = (255, 0, 255)</span></span><br><span class="line">    means, dev = cv.meanStdDev(blank)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;means: &#123;&#125;, \n dev: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(means, dev))</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;images/2.png&#x27;</span></span><br><span class="line">    pixel_operation(path)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">means: [[<span class="number">182.14066441</span>]</span><br><span class="line"> [<span class="number">159.24370946</span>]</span><br><span class="line"> [<span class="number">144.10951802</span>]], </span><br><span class="line"> dev: [[<span class="number">49.00258211</span>]</span><br><span class="line"> [<span class="number">44.59737827</span>]</span><br><span class="line"> [<span class="number">38.95002303</span>]]</span><br><span class="line"><span class="built_in">min</span>: <span class="number">14</span>, <span class="built_in">max</span>: <span class="number">255</span></span><br><span class="line">means: [[<span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>]], </span><br><span class="line"> dev: [[<span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>]]</span><br></pre></td></tr></table></figure><h2 id="绘制几何形状"><a href="#绘制几何形状" class="headerlink" title="绘制几何形状"></a>绘制几何形状</h2><p>使用opencv中一些几何函数可以在图像上绘制几何形状，这些函数有：<code>cv.rectangle()</code>，<code>cv.circle()</code>，<code>cv.line()</code>，<code>cv.putText()</code>。分别是绘制矩形、圆、直线和文字。</p><p>关于这些函数的使用在这里不做过多赘述。主要将以下<code>cv.putText()</code>显示中文乱码的问题。</p><p>比如正常情况下我运行：<code>cv.putText(img1, &#39;Hello, World!&#39;, (50, 50), cv.FONT_HERSHEY_SIMPLEX, 1.0, (255, 0, 0), 2, 8)</code><br>可以显示正常。</p><p><img src="https://img-blog.csdnimg.cn/c7730b846e17477fb2074883ab1ad084.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASG9uZ19Zb3V0aA==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="英语显示正常"></p><p>一旦改成中文，就显示乱码。<code>cv.putText(img1, &#39;你好，世界&#39;, (50, 50), cv.FONT_HERSHEY_SIMPLEX, 1.0, (255, 0, 0), 2, 8)</code></p><p><img src="https://img-blog.csdnimg.cn/09a36fb750a94f92843fe85352f28239.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASG9uZ19Zb3V0aA==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="中文显示乱码"></p><p>解决方法：写一个绘制文字的函数，解决中文乱码问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 弥补putText()显示中文乱码的问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_add_text</span>(<span class="params">img, text, left, top, text_color, text_size</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(img, np.ndarray): <span class="comment"># 判断是否是opencv图片类型，是就转换Image类型</span></span><br><span class="line">        image = Image.fromarray(cv.cvtColor(img, cv.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个可以在给定图像上绘制的对象</span></span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    <span class="comment"># 字体的格式</span></span><br><span class="line">    font_style = ImageFont.truetype(<span class="string">&quot;font/simsun.ttc&quot;</span>, text_size, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 绘制文本</span></span><br><span class="line">    draw.text((left, top), text, text_color, font=font_style)</span><br><span class="line">    <span class="comment"># 转换回opencv格式并返回</span></span><br><span class="line">    <span class="keyword">return</span> cv.cvtColor(np.asarray(image), cv.COLOR_RGB2BGR)</span><br></pre></td></tr></table></figure><p>完整代码：绘制几何形状和文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: image_shape_painting.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Date: 21:12</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 弥补putText()显示中文乱码的问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_add_text</span>(<span class="params">img, text, left, top, text_color, text_size</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(img, np.ndarray): <span class="comment"># 判断是否是opencv图片类型，是就转换Image类型</span></span><br><span class="line">        image = Image.fromarray(cv.cvtColor(img, cv.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个可以在给定图像上绘制的对象</span></span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    <span class="comment"># 字体的格式</span></span><br><span class="line">    font_style = ImageFont.truetype(<span class="string">&quot;font/simsun.ttc&quot;</span>, text_size, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 绘制文本</span></span><br><span class="line">    draw.text((left, top), text, text_color, font=font_style)</span><br><span class="line">    <span class="comment"># 转换回opencv格式并返回</span></span><br><span class="line">    <span class="keyword">return</span> cv.cvtColor(np.asarray(image), cv.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing_demo</span>():</span></span><br><span class="line">    img1 = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    temp = np.copy(img1)</span><br><span class="line">    <span class="comment"># 绘制矩形</span></span><br><span class="line">    cv.rectangle(img1, (<span class="number">50</span>, <span class="number">50</span>), (<span class="number">400</span>, <span class="number">400</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">4</span>, <span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 绘制圆形</span></span><br><span class="line">    cv.circle(img1, (<span class="number">200</span>, <span class="number">200</span>), <span class="number">100</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), -<span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 绘制直线</span></span><br><span class="line">    cv.line(img1, (<span class="number">50</span>, <span class="number">50</span>), (<span class="number">400</span>, <span class="number">400</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 写文字</span></span><br><span class="line">    <span class="comment"># cv.putText(img1, &#x27;你好，世界&#x27;, (50, 50), cv.FONT_HERSHEY_SIMPLEX, 1.0, (255, 0, 0), 2, 8)</span></span><br><span class="line">    img1 = image_add_text(img1, <span class="string">&#x27;你好，世界&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 擦除</span></span><br><span class="line">    <span class="comment"># # 方法1</span></span><br><span class="line">    <span class="comment"># img1[:, :, :] = 0</span></span><br><span class="line">    <span class="comment"># # 方法2</span></span><br><span class="line">    <span class="comment"># img1 = temp</span></span><br><span class="line"></span><br><span class="line">    cv.imshow(<span class="string">&#x27;input&#x27;</span>, img1)</span><br><span class="line"></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;images/2.png&#x27;</span></span><br><span class="line">    drawing_demo()</span><br></pre></td></tr></table></figure><p>结果成功显示中文。完美！</p><p><img src="https://img-blog.csdnimg.cn/b925fae1680542deb2fcb4966d09f06f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBASG9uZ19Zb3V0aA==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="中文显示正常"></p><blockquote><p>更多计算机视觉知识，请关注微信公众号 <strong>“AI与计算机视觉”。</strong></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;图像像素均值、方差&quot;&gt;&lt;a href=&quot;#图像像素均值、方差&quot; class=&quot;headerlink&quot; title=&quot;图像像素均值、方差&quot;&gt;&lt;/a&gt;图像像素均值、方差&lt;/h2&gt;&lt;p&gt;计算数组元素的均值和方差函数&lt;code&gt;cv.meanStdDev()&lt;/code&gt;。传入数组数据，返回数组数据的均值和方差。在图像数组中，可以计算出图像数组的像素均值和方差。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;np.min&lt;/code&gt;和&lt;code&gt;np.max&lt;/code&gt;可以计算数组元素的最小值和最大值。在图像数组中，可以计算每个通道像素最小值和最大值。&lt;/p&gt;</summary>
    
    
    
    <category term="opencv" scheme="https://youthjourney.github.io/categories/opencv/"/>
    
    
    <category term="opencv-python" scheme="https://youthjourney.github.io/tags/opencv-python/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV-Python绘制多边形和选择随机颜色</title>
    <link href="https://youthjourney.github.io/2021/10/20/OpenCV-Python%E7%BB%98%E5%88%B6%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%92%8C%E9%80%89%E6%8B%A9%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/"/>
    <id>https://youthjourney.github.io/2021/10/20/OpenCV-Python%E7%BB%98%E5%88%B6%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%92%8C%E9%80%89%E6%8B%A9%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/</id>
    <published>2021-10-20T03:00:04.000Z</published>
    <updated>2021-10-20T03:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h2><p>在使用 opencv 绘制几何图像时，除了大多数情况下绘制的<a href="https://blog.csdn.net/hallobike/article/details/120611521">简单形状</a>，有时也需要绘制复杂的多边形形状。下面就来一起尝试如何绘制多边形形状。</p><span id="more"></span><p>首先需要了解几个 opencv 库函数。</p><ul><li><p><code>cv.polylines()</code>多边形绘制<br>需要传入画布、轮廓点、是否闭合、绘制颜色、线条粗细、线条类型、顶点坐标小数位。</p></li><li><p><code>cv.fillPoly()</code>多边形填充<br>需要传入画布、轮廓点、填充颜色、线条类型、顶点坐标小数位。</p></li><li><p><code>drawContours()</code>既可以填充也可以绘制多边形<br>需要传入画布（三通道画布才能显示轮廓）、轮廓点、绘制轮廓数（-1 表示绘制其中的所有轮廓）、颜色、轮廓粗细（-1 表示填充）。</p></li></ul><p>话不多说，直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: image_shape_painting.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Date: 21:12</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">polygon_drawing</span>():</span></span><br><span class="line">    canvas = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义多边形的顶点</span></span><br><span class="line">    pts = np.array([[<span class="number">100</span>, <span class="number">100</span>], [<span class="number">350</span>, <span class="number">100</span>], [<span class="number">450</span>, <span class="number">280</span>], [<span class="number">320</span>, <span class="number">450</span>], [<span class="number">80</span>, <span class="number">400</span>]], dtype=np.int32)</span><br><span class="line">    <span class="comment"># 多边形绘制</span></span><br><span class="line">    <span class="comment"># cv.polylines(canvas, [pts], True, (0, 0, 255), 2, 8, 0)</span></span><br><span class="line">    <span class="comment"># 多边形填充</span></span><br><span class="line">    <span class="comment"># cv.fillPoly(canvas, [pts], (255, 0, 255), 8, 0)</span></span><br><span class="line">    <span class="comment"># 既可以填充也可以绘制形状, thickness为时绘制形状，-1时填充形状</span></span><br><span class="line">    <span class="comment"># 可以添加多个轮廓，用,号隔开，比如[pts1, pts2, ...]</span></span><br><span class="line">    cv.drawContours(canvas, [pts], -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    cv.imshow(<span class="string">&#x27;polyline&#x27;</span>, canvas)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    polygon_drawing()</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="https://files.mdnice.com/user/20794/18b473d2-14a0-4307-bf8d-3fa7903f5bb2.jpg" alt="多边形绘制"><br><img src="https://files.mdnice.com/user/20794/06d58645-0317-4737-a603-fa4ab278e9d2.jpg" alt="多边形填充"></p><h2 id="随机颜色和随机数"><a href="#随机颜色和随机数" class="headerlink" title="随机颜色和随机数"></a>随机颜色和随机数</h2><p>在 opencv 中，有时需要随机的地使用一些颜色而不是固定的给出某种颜色，这个时候就需要使用随机数的方式来设置随机颜色。</p><p>主要用到的是 numpy 中的随机数函数，先介绍几种 np 中的随机数函数。</p><ol><li><p><code>np.random.randn()</code>函数</p><blockquote><p><code>np.random.randn(d0,d1,d2……dn)</code><br>1）当函数括号内没有参数时，则返回一个浮点数；<br>2）当函数括号内有一个参数时，则返回秩为 1 的数组，不能表示向量和矩阵；<br>3）当函数括号内有两个及以上参数时，则返回对应维度的数组，能表示向量或矩阵；<br>4）<code>np.random.standard_normal()</code>函数与<code>np.random.randn()</code>类似，但是<code>np.random.standard_normal()</code>的输入参数为元组（tuple）；<br>5)<code>np.random.randn()</code>的输入通常为整数，但是如果为浮点数，则会自动直接截断转换为整数；<br>6）通过该函数可以返回一个或一组服从标准正态分布的随机样本值。</p></blockquote></li><li><p><code>np.random.rand()</code>函数</p><blockquote><p><code>np.random.rand(d0,d1,d2……dn)</code><br>注：使用方法与<code>np.random.randn()</code>函数相同。<br>1）通过本函数可以返回一个或一组服从 <strong>“0~1”均匀分布</strong> 的随机样本值。随机样本取值范围是[0,1)，不包括 1。</p></blockquote></li><li><p>np.random.randint()函数</p><blockquote><p><code>numpy.random.randint(low, high=None, size=None, dtype=’l’)</code><br>输入：<br>low——为最小值<br>high——为最大值<br>size——为数组维度大小<br>dtype——为数据类型，默认的数据类型是<code>np.int</code><br>返回值：<br>返回随机整数或整型数组，范围区间为[low,high），包含 low，不包含 high；high 没有填写时，默认生成随机数的范围是[0，low）</p></blockquote></li></ol><p>在随机颜色的实现中用到的是第三种函数，具体代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: image_shape_painting.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Date: 21:12</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_color</span>():</span></span><br><span class="line">    img = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 设置随机位置</span></span><br><span class="line">        xx = np.random.randint(<span class="number">0</span>, <span class="number">300</span>, <span class="number">2</span>, dtype=np.int32)</span><br><span class="line">        yy = np.random.randint(<span class="number">0</span>, <span class="number">300</span>, <span class="number">2</span>, dtype=np.int32)</span><br><span class="line">        <span class="comment"># 设置随机颜色，可以用于目标检测画不同目标边界框的随机颜色</span></span><br><span class="line">        bgr = np.random.randint(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>, dtype=np.int32)</span><br><span class="line">        <span class="built_in">print</span>(bgr[<span class="number">0</span>], bgr[<span class="number">1</span>], bgr[<span class="number">2</span>])</span><br><span class="line">        <span class="comment"># 画直线，将每个bgr分量int转换以下，不然被认为不是数字，出错。</span></span><br><span class="line">        cv.line(img, (xx[<span class="number">0</span>], yy[<span class="number">0</span>]), (xx[<span class="number">1</span>], yy[<span class="number">1</span>]), (<span class="built_in">int</span>(bgr[<span class="number">0</span>]), <span class="built_in">int</span>(bgr[<span class="number">1</span>]), <span class="built_in">int</span>(bgr[<span class="number">2</span>])), <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        cv.imshow(<span class="string">&#x27;line&#x27;</span>, img)</span><br><span class="line">        c = cv.waitKey(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    random_color()</span><br></pre></td></tr></table></figure><p>结果展示：</p><p><img src="https://files.mdnice.com/user/20794/21446fa7-bb33-4ae0-83f4-3fbac3a6d6ef.png" alt="随机颜色"></p><p>更多计算机视觉内容，请关注微信公众号 <strong>“AI 与计算机视觉”</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;绘制多边形&quot;&gt;&lt;a href=&quot;#绘制多边形&quot; class=&quot;headerlink&quot; title=&quot;绘制多边形&quot;&gt;&lt;/a&gt;绘制多边形&lt;/h2&gt;&lt;p&gt;在使用 opencv 绘制几何图像时，除了大多数情况下绘制的&lt;a href=&quot;https://blog.csdn.net/hallobike/article/details/120611521&quot;&gt;简单形状&lt;/a&gt;，有时也需要绘制复杂的多边形形状。下面就来一起尝试如何绘制多边形形状。&lt;/p&gt;</summary>
    
    
    
    <category term="opencv" scheme="https://youthjourney.github.io/categories/opencv/"/>
    
    
    <category term="opencv-python" scheme="https://youthjourney.github.io/tags/opencv-python/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV-Python图像的创建和图像颜色空间转换</title>
    <link href="https://youthjourney.github.io/2021/10/06/OpenCV-Python%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>https://youthjourney.github.io/2021/10/06/OpenCV-Python%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-10-06T06:29:47.000Z</published>
    <updated>2021-10-06T06:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像颜色空间转换"><a href="#图像颜色空间转换" class="headerlink" title="图像颜色空间转换"></a>图像颜色空间转换</h2><p>在使用OpenCV读去图像文件时，我们得到的图像通道顺序是BGR，每个通道的数值是0~255之间。由于对图像操作的需要，我们会将图像进行颜色空间转换处理，通常是将图像从RGB颜色空间转换到其他颜色空间，比如HSV颜色空间。这个过程需要用到两个opencv库函数。</p><ul><li><strong>图像读取函数<code>cv2.imread()</code></strong><br>这个函数有两个参数，第一个是图像文件名，即输入图像的文件所在路径和名称；第二个参数是<code>flag</code>，指定读取图像文件的类型，常见的三种读取图像类型的标志为:<br>(1) <code>cv2.IMREAD_COLOR</code>: 默认参数，读入彩色图像，忽略alpha通道，数字1；<br>(2) <code>cv2.IMREAD_GRAYSCALE</code>：读入灰度图片，数字0；<br>(3) <code>cv2.IMREAD_UNCHANGED</code>：读入完整图片，包括alpha通道，数字-1。</li></ul> <span id="more"></span><ul><li><strong>转换图像颜色空间函数<code>cv2.cvtColor()</code></strong><br>这个函数同样是两个参数，一个是读入的图像image，一个是指定图像要转换的类型，比如灰度类型，HSV颜色空间，BGR转RGB通道等  </li></ul><p>以下图为例做实验：  </p><p><img src="/2021/10/06/OpenCV-Python%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/demo.png" alt="demo"></p><p>具体代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: color_space_conversion.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_space_conversion</span>(<span class="params">image_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    img = cv.imread(image_path)  <span class="comment"># BGR读取图像，0~255，苹果手机上颜色是用sRGB，DCI-P3</span></span><br><span class="line">    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)  <span class="comment"># 转为灰度图</span></span><br><span class="line">    hsv = cv.cvtColor(img, cv.COLOR_BGR2HSV)  <span class="comment"># 转为HSV颜色空间，H 0~180, S,V 0~255</span></span><br><span class="line">    bgr = cv.cvtColor(img, cv.COLOR_HSV2BGR)</span><br><span class="line"></span><br><span class="line">    cv.imshow(<span class="string">&#x27;img&#x27;</span>, img)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;gray&#x27;</span>, gray)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;hsv&#x27;</span>, hsv)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;bgr&#x27;</span>, bgr)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;images/2.png&#x27;</span></span><br><span class="line">    color_space_conversion(path) </span><br></pre></td></tr></table></figure><p>图像转换效果：  </p><p><img src="/2021/10/06/OpenCV-Python%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/color_space_convert.png" alt="color_space_convert">  </p><h2 id="图像的创建和复制"><a href="#图像的创建和复制" class="headerlink" title="图像的创建和复制"></a>图像的创建和复制</h2><p>在opencv-python中创建图像和复制图像都是numpy数组的操作，本文介绍两种创建图像和两种复制图像的方法。两种创建图像的方式是：  </p><p><strong>1. 使用<code>np.zeros_like()</code>函数</strong><br>该函数是将已读取的图片image作为参数传入函数，就可以创建一个和image形状相同的图像，但是都是0像素值。  </p><p><strong>2. 使用<code>np.zeros()</code>函数</strong><br>该函数要<strong>传入需要创建图像的形状，并且需要指定数组的数据类型</strong>，默认值是<code>np.float64</code>  </p><p>在复制图像时，本文也给出两种实现方法：  </p><p><strong>1. 使用<code>np.copy()</code>函数</strong><br>将需要复制的图像image传入该函数，会返回一个numpy数组也即是图像，改变该返回值图像的内容，原图像不会改变。  </p><p><strong>2. 使用直接赋值的方法</strong><br>可以采用直接复制的方法将图像image复制给新的变量实现图像的复制，但是这种复制在<strong>改变新的图像时，原来的图像也会随着改变。</strong>  </p><p>具体代码如下：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: color_space_conversion.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpy_img</span>(<span class="params">image_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在opencv-python中所有的图像都是numpy数组，</span></span><br><span class="line"><span class="string">    可以使用numpy操作图像，如生成图像、修改图像、复制图像</span></span><br><span class="line"><span class="string">    :param image_path: 传入图像文件路径</span></span><br><span class="line"><span class="string">    :return: 没有返回值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># cv2.IMREAD_COLOR: 默认参数，读入彩色图像，忽略alpha通道，数字1；</span></span><br><span class="line">    <span class="comment"># cv2.IMREAD_GRAYSCALE：读入灰度图片，数字0；</span></span><br><span class="line">    <span class="comment"># cv2.IMREAD_UNCHANGED：读入完整图片，包括alpha通道，数字-1</span></span><br><span class="line">    img_color = cv.imread(image_path, cv.IMREAD_COLOR)</span><br><span class="line">    img_gray = cv.imread(image_path, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    img_unchanged = cv.imread(image_path, cv.IMREAD_UNCHANGED)</span><br><span class="line">    <span class="built_in">print</span>(img_color.shape)  <span class="comment"># H, W, C  (888，500，3）</span></span><br><span class="line">    <span class="built_in">print</span>(img_gray.shape)  <span class="comment"># H, W  (888, 500)</span></span><br><span class="line">    <span class="built_in">print</span>(img_unchanged.shape)  <span class="comment"># H, W, C (888, 500, 4)</span></span><br><span class="line"></span><br><span class="line">    h, w, c = img_color.shape</span><br><span class="line">    roi = img_color[<span class="number">190</span>:<span class="number">400</span>, <span class="number">150</span>:<span class="number">380</span>, :]  <span class="comment"># 截取img_color图像的一部分, 第一维度指定高的范围，第二维度指定宽的范围，第三维度是通道</span></span><br><span class="line">    <span class="comment"># 方法1 创建一个和img_color形状相同的空白图片</span></span><br><span class="line">    <span class="comment"># blank = np.zeros_like(img_color)</span></span><br><span class="line">    <span class="comment"># 方法2 使用h w c和数据类型，创建一个空白图像</span></span><br><span class="line">    blank = np.zeros((h, w, c), dtype=np.uint8)</span><br><span class="line">    <span class="comment"># blank[190:400, 150:380, :] = img_color[190:400, 150:380, :]</span></span><br><span class="line">    <span class="comment"># print(blank)</span></span><br><span class="line">    <span class="comment"># 方法1 图像copy, 改变blank，不会改变img_color</span></span><br><span class="line">    <span class="comment"># blank = np.copy(img_color)</span></span><br><span class="line">    <span class="comment"># 方法2 图像赋值, 共用同一个数据，改变blank，就会改变img_color</span></span><br><span class="line">    <span class="comment"># blank = img_color</span></span><br><span class="line">    cv.imshow(<span class="string">&#x27;roi&#x27;</span>, roi)</span><br><span class="line">    cv.imshow(<span class="string">&#x27;blank&#x27;</span>, blank)</span><br><span class="line"></span><br><span class="line">    cv.imshow(<span class="string">&#x27;img_color&#x27;</span>, img_color)</span><br><span class="line">    <span class="comment"># cv.imshow(&#x27;img_gray&#x27;, img_gray)</span></span><br><span class="line">    <span class="comment"># cv.imshow(&#x27;img_unchanged&#x27;, img_unchanged)</span></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;images/2.png&#x27;</span></span><br><span class="line">    numpy_img(path)</span><br></pre></td></tr></table></figure><p>图像创建和复制结果展示：  </p><p><img src="/2021/10/06/OpenCV-Python%E5%9B%BE%E5%83%8F%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/create_and_copy.png" alt="create_and_copy">  </p><p>更多精彩内容请关注微信公众号<strong>《AI与计算机视觉》</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;图像颜色空间转换&quot;&gt;&lt;a href=&quot;#图像颜色空间转换&quot; class=&quot;headerlink&quot; title=&quot;图像颜色空间转换&quot;&gt;&lt;/a&gt;图像颜色空间转换&lt;/h2&gt;&lt;p&gt;在使用OpenCV读去图像文件时，我们得到的图像通道顺序是BGR，每个通道的数值是0~255之间。由于对图像操作的需要，我们会将图像进行颜色空间转换处理，通常是将图像从RGB颜色空间转换到其他颜色空间，比如HSV颜色空间。这个过程需要用到两个opencv库函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图像读取函数&lt;code&gt;cv2.imread()&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;这个函数有两个参数，第一个是图像文件名，即输入图像的文件所在路径和名称；第二个参数是&lt;code&gt;flag&lt;/code&gt;，指定读取图像文件的类型，常见的三种读取图像类型的标志为:&lt;br&gt;(1) &lt;code&gt;cv2.IMREAD_COLOR&lt;/code&gt;: 默认参数，读入彩色图像，忽略alpha通道，数字1；&lt;br&gt;(2) &lt;code&gt;cv2.IMREAD_GRAYSCALE&lt;/code&gt;：读入灰度图片，数字0；&lt;br&gt;(3) &lt;code&gt;cv2.IMREAD_UNCHANGED&lt;/code&gt;：读入完整图片，包括alpha通道，数字-1。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="opencv" scheme="https://youthjourney.github.io/categories/opencv/"/>
    
    
    <category term="opencv-python" scheme="https://youthjourney.github.io/tags/opencv-python/"/>
    
  </entry>
  
  <entry>
    <title>解决OpenCV读完视频报错的问题</title>
    <link href="https://youthjourney.github.io/2021/10/06/%E8%A7%A3%E5%86%B3OpenCV%E8%AF%BB%E5%AE%8C%E8%A7%86%E9%A2%91%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://youthjourney.github.io/2021/10/06/%E8%A7%A3%E5%86%B3OpenCV%E8%AF%BB%E5%AE%8C%E8%A7%86%E9%A2%91%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-06T00:49:20.000Z</published>
    <updated>2021-10-06T00:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于项目的需要，经常需要使用opencv读视频操作，会经常遇到一个问题，就是视频读完之后会出现报错的情况，虽然不影响代码结果，但是对于吹毛求疵的我实在忍受不了。</p><span id="more"></span><p>会报错的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: read_video.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_video</span>(<span class="params">video_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    OpenCV读视频小工具，解决视频读完报错的问题</span></span><br><span class="line"><span class="string">    :param video_path: 输入需要读取的视频文件路径</span></span><br><span class="line"><span class="string">    :return: 没有返回值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视频路径：&#x27;</span>, video_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        <span class="comment"># get a frame</span></span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line"> </span><br><span class="line">        cv2.imshow(<span class="string">&quot;capture&quot;</span>, frame)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视频读完！&#x27;</span>)</span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">r&#x27;D:\multi_insect_videos\multi_object00.mp4&#x27;</span></span><br><span class="line">    read_video(path)</span><br></pre></td></tr></table></figure><p>这个程序可以把视频正常读完，但是结束之后会输出错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:/PyCharmDocument/create_ST_image/multi_insect_processing/crop_video_to_images.py&quot;</span>, line <span class="number">76</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    read_video(path)</span><br><span class="line">  File <span class="string">&quot;E:/PyCharmDocument/create_ST_image/multi_insect_processing/crop_video_to_images.py&quot;</span>, line <span class="number">65</span>, <span class="keyword">in</span> read_video</span><br><span class="line">    cv2.imshow(<span class="string">&quot;capture&quot;</span>, frame)</span><br><span class="line">cv2.error: OpenCV(<span class="number">4.5</span><span class="number">.3</span>) C:\Users\runneradmin\AppData\Local\Temp\pip-req-build-uzca7qz1\opencv\modules\imgproc\src\color.cpp:<span class="number">182</span>: error: (-<span class="number">215</span>:Assertion failed) !_src.empty() <span class="keyword">in</span> function <span class="string">&#x27;cv::cvtColor&#x27;</span></span><br></pre></td></tr></table></figure><p>原因是视频结束后，opencv的<code>imshow()</code>函数获取不到帧就出错了。解决方法：在<code>imshow()</code>之前加入判断，只有当有帧时才读，没有帧时直接退出循环。</p><p>不会报错的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">File Name: read_video.py</span></span><br><span class="line"><span class="string">Program IDE: PyCharm</span></span><br><span class="line"><span class="string">Create File By Author: Hong</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_video</span>(<span class="params">video_path: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    OpenCV读视频小工具，解决视频读完报错的问题</span></span><br><span class="line"><span class="string">    :param video_path: 输入需要读取的视频文件路径</span></span><br><span class="line"><span class="string">    :return: 没有返回值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视频路径：&#x27;</span>, video_path)</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line">    <span class="keyword">while</span> cap.isOpened():</span><br><span class="line">        <span class="comment"># get a frame</span></span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;capture&quot;</span>, frame)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;视频读完！&#x27;</span>)</span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">r&#x27;D:\multi_insect_videos\multi_object00.mp4&#x27;</span></span><br><span class="line">    read_video(path)</span><br></pre></td></tr></table></figure><p>程序输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">视频路径： D:\multi_insect_videos\multi_object00.mp4</span><br><span class="line">视频读完！</span><br><span class="line"> </span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>更多Python小工具请参考GitHub仓库: <a href="https://github.com/YouthJourney/python-script-tools">https://github.com/YouthJourney/python-script-tools</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近由于项目的需要，经常需要使用opencv读视频操作，会经常遇到一个问题，就是视频读完之后会出现报错的情况，虽然不影响代码结果，但是对于吹毛求疵的我实在忍受不了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="opencv-python" scheme="https://youthjourney.github.io/tags/opencv-python/"/>
    
  </entry>
  
</feed>
